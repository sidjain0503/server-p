"""
Customer API routes

This module contains CUSTOM customer-related API endpoints for business logic.
The standard CRUD operations are auto-generated by the meta-engine.
"""

from typing import List, Optional
from fastapi import APIRouter, HTTPException, Depends, Path, Body, status
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import BaseModel, Field

from app.api.v1.dependencies import (
    DatabaseSession, get_crud_service,
    get_pagination_params, get_search_params
)
from app.meta_engine.orchestrator import get_meta_engine
from app.meta_engine.crud_service import QueryParams

# Create router for custom customer endpoints
router = APIRouter()

# Get the CRUD service for customers
get_customer_crud = get_crud_service("Customer")


# =============================================================================
# Custom Business Logic Routes (CRUD routes are auto-generated)
# =============================================================================

class LoyaltyUpdateRequest(BaseModel):
    """Loyalty points update request model"""
    points_change: int = Field(..., description="Points change (positive or negative)")
    reason: str = Field("manual_adjustment", description="Reason for points change")


@router.put("/{customer_id}/loyalty", summary="Update Customer Loyalty Points")
async def update_loyalty_points(
    db: DatabaseSession,
    crud_service = Depends(get_customer_crud),
    customer_id: int = Path(..., description="Customer ID"),
    request: LoyaltyUpdateRequest = Body(...)
):
    """Update customer loyalty points"""
    try:
        customer = await crud_service.get(db, customer_id)
        if not customer:
            raise HTTPException(status_code=404, detail="Customer not found")
        
        # Calculate new points
        new_points = customer.loyalty_points + request.points_change
        if new_points < 0:
            new_points = 0  # Don't allow negative points
        
        # Update customer with new loyalty points
        await crud_service.update(db, customer_id, {
            "loyalty_points": new_points
        })
        
        return JSONResponse(
            status_code=200,
            content={
                "message": "Loyalty points updated successfully",
                "customer_id": customer_id,
                "old_points": customer.loyalty_points,
                "new_points": new_points,
                "change": request.points_change,
                "reason": request.reason
            }
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/status/{status}", summary="Get Customers by Status")
async def get_customers_by_status(
    db: DatabaseSession,
    crud_service = Depends(get_customer_crud),
    pagination = Depends(get_pagination_params),
    status: str = Path(..., description="Customer status")
):
    """Get all customers with a specific status"""
    try:
        query_params = QueryParams(
            skip=pagination.skip,
            limit=pagination.limit,
            filters={"status": status}
        )
        customers = await crud_service.list(db, query_params)
        return customers
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e)) 