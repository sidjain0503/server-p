"""
Task API routes

This module contains CUSTOM task-related API endpoints for business logic.
The standard CRUD operations are auto-generated by the meta-engine.
"""

from typing import List, Optional
from fastapi import APIRouter, HTTPException, Depends, Path, Body, status
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import BaseModel, Field
from datetime import datetime

from app.api.v1.dependencies import (
    DatabaseSession, get_crud_service,
    get_pagination_params, get_search_params
)
from app.meta_engine.orchestrator import get_meta_engine
from app.meta_engine.crud_service import QueryParams

# Create router for custom task endpoints
router = APIRouter()

# Get the CRUD service for tasks
get_task_crud = get_crud_service("Task")


# =============================================================================
# Custom Business Logic Routes (CRUD routes are auto-generated)
# =============================================================================

class TaskStatusUpdate(BaseModel):
    """Task status update request model"""
    status: str = Field(..., description="New task status")
    comment: Optional[str] = Field(None, description="Optional comment for status change")


class TaskPriorityUpdate(BaseModel):
    """Task priority update request model"""
    priority: str = Field(..., description="New task priority")
    reason: Optional[str] = Field(None, description="Reason for priority change")


@router.put("/{task_id}/status", summary="Update Task Status")
async def update_task_status(
    db: DatabaseSession,
    crud_service = Depends(get_task_crud),
    task_id: int = Path(..., description="Task ID"),
    request: TaskStatusUpdate = Body(...)
):
    """Update task status with optional comment"""
    try:
        task = await crud_service.get(db, task_id)
        if not task:
            raise HTTPException(status_code=404, detail="Task not found")
        
        # Update task status
        update_data = {"status": request.status}
        
        # If marking as done, set completion time
        if request.status == "done":
            update_data["completed_at"] = datetime.utcnow()
        
        updated_task = await crud_service.update(db, task_id, update_data)
        
        return JSONResponse(
            status_code=200,
            content={
                "message": "Task status updated successfully",
                "task_id": task_id,
                "old_status": task.status,
                "new_status": request.status,
                "comment": request.comment
            }
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.put("/{task_id}/priority", summary="Update Task Priority")
async def update_task_priority(
    db: DatabaseSession,
    crud_service = Depends(get_task_crud),
    task_id: int = Path(..., description="Task ID"),
    request: TaskPriorityUpdate = Body(...)
):
    """Update task priority with optional reason"""
    try:
        task = await crud_service.get(db, task_id)
        if not task:
            raise HTTPException(status_code=404, detail="Task not found")
        
        # Update task priority
        await crud_service.update(db, task_id, {"priority": request.priority})
        
        return JSONResponse(
            status_code=200,
            content={
                "message": "Task priority updated successfully",
                "task_id": task_id,
                "old_priority": task.priority,
                "new_priority": request.priority,
                "reason": request.reason
            }
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/status/{task_status}", summary="Get Tasks by Status")
async def get_tasks_by_status(
    db: DatabaseSession,
    crud_service = Depends(get_task_crud),
    pagination = Depends(get_pagination_params),
    task_status: str = Path(..., description="Task status")
):
    """Get all tasks with a specific status"""
    try:
        query_params = QueryParams(
            skip=pagination.skip,
            limit=pagination.limit,
            filters={"status": task_status}
        )
        tasks = await crud_service.list(db, query_params)
        return tasks
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/priority/{priority}", summary="Get Tasks by Priority")
async def get_tasks_by_priority(
    db: DatabaseSession,
    crud_service = Depends(get_task_crud),
    pagination = Depends(get_pagination_params),
    priority: str = Path(..., description="Task priority")
):
    """Get all tasks with a specific priority"""
    try:
        query_params = QueryParams(
            skip=pagination.skip,
            limit=pagination.limit,
            filters={"priority": priority}
        )
        tasks = await crud_service.list(db, query_params)
        return tasks
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/urgent", summary="Get Urgent Tasks")
async def get_urgent_tasks(
    db: DatabaseSession,
    crud_service = Depends(get_task_crud),
    pagination = Depends(get_pagination_params)
):
    """Get all urgent tasks"""
    try:
        query_params = QueryParams(
            skip=pagination.skip,
            limit=pagination.limit,
            filters={"is_urgent": True}
        )
        tasks = await crud_service.list(db, query_params)
        return tasks
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/overdue", summary="Get Overdue Tasks")
async def get_overdue_tasks(
    db: DatabaseSession,
    crud_service = Depends(get_task_crud),
    pagination = Depends(get_pagination_params)
):
    """Get all overdue tasks (due date passed and not completed)"""
    try:
        # This would need custom logic in the CRUD service
        # For now, we'll use a simple filter
        query_params = QueryParams(
            skip=pagination.skip,
            limit=pagination.limit,
            filters={
                "due_date__lt": datetime.utcnow(),
                "status__ne": "done"
            }
        )
        tasks = await crud_service.list(db, query_params)
        return tasks
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e)) 